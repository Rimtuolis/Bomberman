@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@using System.Text.Json;
@using Newtonsoft.Json;
@using System.Net;
@using System.Net.Sockets;
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>

<div>
    <p class="player-counter">Players joined: @players.Count</p>
</div>
<div>

@if (subject.Paused)
{
    @foreach (var player in pausePlayers)
    {
            <p class="paused-player">@player.ConnectionId has paused the game</p>
        }

    }
    else
    {
        <p style= "color: transparent; font-size: large" > Nematoma</p>
    }
</div>
<div class="game-container">
    <div class="grid-container">

        @for (int row = 0; row < 10; row++)
        {
            @for (int col = 0; col < 10; col++)
            {
                <div class="grid-item"></div>
            }
        }


        @foreach (var player in players)
        {
            <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
        }
        @foreach (var bomb in bombs)
        {
            <div class="bomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
        }
        @foreach (var bomb in specialBombs)
        {
            <div class="specialBomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
        }
        @foreach (var brick in easyLevel.Bricks)
        {
            <div class="brick" style="left: @brick.GetStartX()%; top: @brick.GetStartY()%; width: @brick.GetLength()%px; height: @brick.GetLength()%px;"></div>
        }
        @foreach (var box in easyLevel.Boxes)
        {
            <div class="box" style="left: @box.GetStartX()%; top: @box.GetStartY()%; width: @box.GetLength()%px; height: @box.GetLength()%px;"></div>
        }

    </div>

    <div class="scoreboard">
        <table id="scoreboard">
            <thead>
                <tr>
                    <th>Scoreboard</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var player in allPlayerScores)
                {

                    <tr>
                        <td>Player: @x</td>
                        <th>@player.Points</th>
                    </tr>
                }
            </tbody>

        </table>

    </div>

</div>
@if (!playerJoined)
{
    <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
}
@if (playerJoined && IsConnected)
{

    @if (!pausePlayers.Contains(this.getConnectedPlayer()))
    {
        <button class="pause-button" @onclick="PauseArena">Pause</button>
    }
    else
    {
        <button class="pause-button" @onclick="PauseArena">Unpause</button>
    }
}



@code {
    private int x = 1;
    private HubConnection? hubConnection;
    private List<Player> players = new List<Player>();
    private List<Player> allPlayerScores = PlayerManager.Instance.GetAllPlayers();
    private IGameLevelBuilder builder = new EasyGameLevelBuilder();
    private GameLevel easyLevel = new GameLevel();
    JsonSerializerSettings settings = new JsonSerializerSettings()
        {
            Converters = new List<JsonConverter>
            {
                new InterfaceToConcreteTypeJsonConverter<IStructure,BrickWall>(),
                new InterfaceToConcreteTypeJsonConverter<IStructure,Box>()
            }
        };


    private List<Bomb> bombs = new List<Bomb>();
    private List<SpecialBomb> specialBombs = new List<SpecialBomb>();
    private PlayerManagerSubject subject = new PlayerManagerSubject();
    bool playerJoined = false;
    bool arenaPaused = false;
    bool placedSpecialbomb = false;
    private Player pausedPlayer, tempPlayer, newPlayer, connectedPlayer;
    private List<Player> pausedPlayers = new List<Player>();
    private PlayerObserver? playerObserverer;
    public List<IGameObserver> observerList = new List<IGameObserver>();
    public List<PlayerObserver> pausedObservers = new List<PlayerObserver>();
    public List<Player> pausePlayers = new List<Player>();

    protected override async Task OnInitializedAsync()
    {
        builder.BuildBoxes();
        builder.BuildBricks();
        easyLevel = builder.GetResult();
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            players = existingPlayers;
            allPlayerScores = existingPlayers;
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player, PlayerObserver>("PlayerJoined", (player, playerObserver) =>
        {
            playerObserverer = playerObserver;
            observerList.Add(playerObserverer);
            players.Add(player);
            StateHasChanged();
        });
        hubConnection.On<Player>("ObserverJoined", (player) =>
        {
            playerObserverer = new PlayerObserver(player);
            observerList.Add(playerObserverer);
            pausedPlayer = player;
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerMoved", (newPlayers) =>
        {
            players = newPlayers;
            allPlayerScores = newPlayers;
            StateHasChanged();
        });
        hubConnection.On<List<Bomb>>("AllBombs", (newBombs) =>
        {
            bombs = newBombs;
            StateHasChanged();
        });

        hubConnection.On<PlayerManagerSubject, Player, List<Player>>("PauseArena", (newSubject, player, observers) =>
        {
            subject = newSubject;
            pausePlayers = observers;
            newPlayer = player;
            StateHasChanged();
        });

        hubConnection.On<Bomb>("PlayerPlacedBomb", (bomb) =>
        {
            bombs.Add(bomb);
            StateHasChanged();
        });
        hubConnection.On<List<SpecialBomb>>("AllSpecialBombs", (newBombs) =>
        {
            specialBombs = newBombs;
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerPlacedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Add(bomb);
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerRemovedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Remove(bomb);
            StateHasChanged();
        });
        await hubConnection.StartAsync();

    }
    private async Task PauseArena()
    {
        var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        tempPlayer = player;
        if (players.Count >= 2 && !subject.Paused)
        {

            subject.Subscribe(playerObserverer);
            subject.NotifyAll(true);
            pausePlayers.Add(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && !pausePlayers.Contains(tempPlayer))
        {
            subject.Subscribe(playerObserverer);
            subject.NotifyAll(true);
            pausePlayers.Add(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && pausePlayers.Contains(tempPlayer) && pausePlayers.Count > 1)
        {
            subject.Unsubscribe(playerObserverer);
            pausePlayers.Remove(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && pausePlayers.Contains(tempPlayer) && pausePlayers.Count <= 1)
        {
            subject.NotifyAll(false);
            pausePlayers.Remove(tempPlayer);
            subject.Unsubscribe(playerObserverer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
    }

    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena");
        }
    }
    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine(e.Code);
        if (hubConnection is not null && playerJoined && players.Count >= 2 && !subject.Paused)
        {
            var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
            var bomb = new Bomb();
            var specialBomb = new SpecialBomb();
            bomb.Id = player.ConnectionId;
            specialBomb.Id = player.ConnectionId;
            string tempBricks = JsonConvert.SerializeObject(easyLevel.Bricks, settings);
            string tempBoxes = JsonConvert.SerializeObject(easyLevel.Boxes, settings);

            await hubConnection.SendAsync("MovePlayer", player, tempBricks, tempBoxes, e);
            await hubConnection.SendAsync("PlaceBomb", player, bomb, e);
            if (!placedSpecialbomb)
            {
                await hubConnection.SendAsync("PlaceSpecialBomb", player, specialBomb, e);
            }

            if (placedSpecialbomb)
            {
                await hubConnection.SendAsync("RemoveSpecialBomb", player, specialBomb, e);
            }
        }
    }
    public Player getConnectedPlayer()
    {
        Player player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        return player;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}

