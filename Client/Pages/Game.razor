@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>

<div class="arena">
    @foreach (var player in players)
    {
        <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
    }
</div>
@if (!playerJoined)
{
    <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
}




@code {
    private HubConnection? hubConnection;
    private List<Player> players = new List<Player>(); //to map
    bool playerJoined = false;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            Console.WriteLine("parejo");
            foreach (var player in existingPlayers)
            {
                players.Add(player);
            }
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players.Add(player);
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerMoved", (newPlayers) =>
        {
            Console.WriteLine("ATEJO");
            players = newPlayers;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

    }

    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena");
        }
    }
    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine(e.Code);
        var existingPlayer = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);

        switch (e.Code)
        {
            case "37":
                if (existingPlayer.Left > 6)
                {
                    await changeLocation(-1, 0, existingPlayer);
                }
                break;
            case "38":
                if (existingPlayer.Top > 6)
                {
                    await changeLocation(0, -1, existingPlayer);
                }
                break;
            case "39":
                if (existingPlayer.Left < 94)
                {
                    await changeLocation(1, 0, existingPlayer);
                }
                break;
            case "40":
                if (existingPlayer.Top < 94)
                {
                    await changeLocation(0, 1, existingPlayer);
                }
                break;

            default: break;
        }


    }

    private async Task changeLocation(int X, int Y, Player player)
    {
        Console.WriteLine('a');
        if (hubConnection is not null && playerJoined)
        {
            Console.WriteLine('b');
            player.Left += X;
            player.Top += Y;
            await hubConnection.SendAsync("MovePlayer", player);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

