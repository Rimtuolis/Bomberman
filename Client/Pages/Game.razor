@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>

<div class="arena">
    @foreach (var player in players)
    {
        <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
    }
    @foreach (var bomb in bombs)
    {
        <div class="bomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
    }

</div>
@if (!playerJoined)
{
    <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
}




@code {
    private HubConnection? hubConnection;
    private List<Player> players = new List<Player>();
    private List<Bomb> bombs = new List<Bomb>();
    bool playerJoined = false;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            players = existingPlayers;
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players.Add(player);
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerMoved", (newPlayers) =>
        {
            players = newPlayers;
            StateHasChanged();
        });
        hubConnection.On<List<Bomb>>("AllBombs", (newBombs) =>
        {

            bombs = newBombs;
            StateHasChanged();
        });

        hubConnection.On<Bomb>("PlayerPlacedBomb", (bomb) =>
        {
            bombs.Add(bomb);
            StateHasChanged();
        });
        await hubConnection.StartAsync();

    }

    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena");
        }
    }
    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {

        Console.WriteLine(e.Code);
        if (hubConnection is not null && playerJoined) { 
            var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
            var bomb = new Bomb();
            bomb.Id = player.ConnectionId;
            await hubConnection.SendAsync("MovePlayer", player, e);
            await hubConnection.SendAsync("PlaceBomb", player, bomb, e);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

