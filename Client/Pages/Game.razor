@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>


<div>
    <p class="player-counter">Players joined: @players.Count</p>
</div>

@if (arenaPaused)
{
    <div>
        <p class="paused-player">@pausedPlayer.ConnectionId has paused the game</p>
    </div>
}
<div class="arena">
   
    @foreach (var player in players)
    {
        <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
    }

    @foreach (var brick in easyLevel.Bricks)
    {
        <div class="brick" style="top: @brick.GetStartX()%; left: @brick.GetStartY()%; width: @brick.GetLength()%px; height: @brick.GetLength()%px;"></div>
    }
    @foreach (var box in easyLevel.Boxes)
    {
        <div class="box" style="top: @box.GetStartX()%; left: @box.GetStartY()%; width: @box.GetLength()%px; height: @box.GetLength()%px;"></div>
    }


    @foreach (var bomb in bombs)
    {
        <div class="bomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
    }
    @foreach (var bomb in specialBombs)
    {
        <div class="specialBomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
    }

</div>

@if (!playerJoined)
{
    <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
}
@if (playerJoined && IsConnected)
{
    @if (!arenaPaused)
    {
        <button class="pause-button" @onclick="PauseArena">Pause</button>
    }
    else if (arenaPaused)
    {
        <button class="pause-button" @onclick="PauseArena">Unpause</button>
    }
}
<div class="scoreboard">
<table id="scoreboard">
    <thead>
        <tr>
            <th>Scoreboard</th>
        </tr>
    </thead>
    <tbody>
       
        @foreach (var player in allPlayerScores)
        {
            <tr>
                <td>@player.ConnectionId : </td>
                <th>@player.Points</th>
            </tr>
        }
       
    </tbody>

</table>
</div>


@code {
    private HubConnection? hubConnection;
    private List<Player> players = new List<Player>();
    private List<Player> allPlayerScores = PlayerManager.Instance.GetAllPlayers();
    private IGameLevelBuilder builder = new EasyGameLevelBuilder();
    private GameLevel easyLevel = new GameLevel();
  

    private List<Bomb> bombs = new List<Bomb>();
    private List<SpecialBomb> specialBombs = new List<SpecialBomb>();
    bool playerJoined = false;
    bool arenaPaused = false;
    bool placedSpecialbomb = false;
    private Player pausedPlayer, tempPlayer;

    protected override async Task OnInitializedAsync()
    {
        builder.BuildBoxes();
        builder.BuildBricks();
        easyLevel = builder.GetResult();
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            players = existingPlayers;
            allPlayerScores = existingPlayers;
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players.Add(player);
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerMoved", (newPlayers) =>
        {
            
            players = newPlayers;
            allPlayerScores = newPlayers;
            StateHasChanged();
        });
        hubConnection.On<List<Bomb>>("AllBombs", (newBombs) =>
        {

            bombs = newBombs;
            StateHasChanged();
        });

        hubConnection.On<Player>("PauseArena", (player) =>
        {
            arenaPaused = !arenaPaused;
            pausedPlayer = player;
            StateHasChanged();
        });

        hubConnection.On<Bomb>("PlayerPlacedBomb", (bomb) =>
        {
            bombs.Add(bomb);
            StateHasChanged();
        });
        hubConnection.On<List<SpecialBomb>>("AllSpecialBombs", (newBombs) =>
        {
            specialBombs = newBombs;
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerPlacedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Add(bomb);
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerRemovedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Remove(bomb);
            StateHasChanged();
        });
        await hubConnection.StartAsync();

    }
    private async Task PauseArena()
    {
        var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        if (players.Count >= 2 && !arenaPaused)
        {
            tempPlayer = player;
            await hubConnection.SendAsync("PauseArena", player);
        }
        else if (arenaPaused && player == tempPlayer)
        {
            await hubConnection.SendAsync("PauseArena", player);
        }
    }

    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena");
        }
    }
    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {

        Console.WriteLine(e.Code);
        if (hubConnection is not null && playerJoined && players.Count >= 2 && !arenaPaused)
        {
            var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
            var bomb = new Bomb();
            var specialBomb = new SpecialBomb();
            bomb.Id = player.ConnectionId;
            specialBomb.Id = player.ConnectionId;
            await hubConnection.SendAsync("MovePlayer", player, easyLevel.Bricks, e);
            await hubConnection.SendAsync("PlaceBomb", player, bomb, e);
            if (!placedSpecialbomb)
            {
                await hubConnection.SendAsync("PlaceSpecialBomb", player, specialBomb, e);
            }

            if (placedSpecialbomb)
            {
                await hubConnection.SendAsync("RemoveSpecialBomb", player, specialBomb, e);
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

