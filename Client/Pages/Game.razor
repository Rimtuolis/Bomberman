@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@using System.Text.Json;
@using Newtonsoft.Json;
@using System.Net;
@using System.Net.Sockets;
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>



@if (nameSubmited)
{
    <div>
        <p class="player-counter">Players joined: @arena.players.Count</p>
    </div>
    <div>

        @if (subject.Paused)
        {
            @foreach (var player in pausePlayers)
            {
                <p class="paused-player">@player.ConnectionId has paused the game</p>
            }

        }
        else
        {
            <p style="color: transparent; font-size: large"> Nematoma</p>
        }

    </div>
    <div class="game-container">
        <div class="grid-container">

            @for (int row = 0; row < 10; row++)
            {
                @for (int col = 0; col < 10; col++)
                {
                    <div class="grid-item"></div>
                }
            }


        @foreach (var player in arena.players)
        {
            <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
        }
        @foreach (var bomb in arena.bombs)
        {
            @if (!bomb.Exploded)
            {
                <div class="bomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
            }

        }
        @foreach (var bomb in specialBombs)
        {
            <div class="specialBomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
        }
        @for (int i = 0; i < 10; i++)
        {
            @for (int j = 0; j < 10; j++)
            {
                if (arena.grid[i, j] is Box) {
                    <div class="box" style="left: @arena.grid[i, j].GetStartX()%; top: @arena.grid[i, j].GetStartY()%; width: @arena.grid[i, j].GetLength()%px; height: @arena.grid[i, j].GetLength()%px;"></div>
                }
                else if (arena.grid[i, j] is BrickWall) {
                    <div class="brick" style="left: @arena.grid[i, j].GetStartX()%; top: @arena.grid[i, j].GetStartY()%; width: @arena.grid[i, j].GetLength()%px; height: @arena.grid[i, j].GetLength()%px;"></div>
                }
                else if (arena.grid[i, j] is Fire) {
                    <div class="explosion" style="left: @(i*10)%; top: @(j*10)%; width: @arena.grid[i, j].GetLength()%px; height: @arena.grid[i, j].GetLength()%px;"></div>
                }
                else if (arena.grid[i, j] is SpeedPoweerUp) {
                    <div class="powerup" style="left: @(i*10)%; top: @(j*10)%; width: @arena.grid[i, j].GetLength()%px; height: @arena.grid[i, j].GetLength()%px;"></div>
                }
            }
        }


    </div>
    <div class="scoreboard">
        <table id="scoreboard">
            <thead>
                <tr>
                    <th>Scoreboard</th>
                </tr>
            </thead>
            <tbody>


                @foreach (var player in arena.players)
                {
                    <tr>
                        @if (player.ConnectionId == hubConnection.ConnectionId)
                        {
                            <td><u><b>@player.Name :</b></u></td>
                        }
                        else
                        {
                            <td>@player.Name : </td>
                        }
                        <th>@player.Points</th>
                    </tr>
                }

                </tbody>
            </table>

        </div>

    </div>
    @if (!playerJoined)
    {
        <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
    }
    @if (playerJoined && IsConnected)
    {

        @if (!pausePlayers.Contains(this.getConnectedPlayer()))
        {
            <button class="pause-button" @onclick="PauseArena">Pause</button>
        }
        else
        {
            <button class="pause-button" @onclick="PauseArena">Unpause</button>
        }
    }

}
else
{
    <label for="username">Enter your nickname:</label>
    <br>
    <input type="text" id="username" @bind="@name">
    <br>
    <br>
    @if (swearWordSubmitted)
    {
        <p class="paused-player">Dont enter swear words!</p>
    }
    @if (nameExists)
    {
        <p class="paused-player">Player with this nickname exists.</p>
    }
    <button class="join-button" @onclick="@PressedSubmit">Submit</button>

}




@code {

    private HubConnection? hubConnection;
    private IGameLevelBuilder builder = new EasyGameLevelBuilder();
    private static GameLevel easyLevel = new GameLevel();

    Arena arena = new Arena();


    private List<SpecialBomb> specialBombs = new List<SpecialBomb>();
    private PlayerManagerSubject subject = new PlayerManagerSubject();
    private string name = "";
    bool nameSubmited = false;
    bool swearWordSubmitted = false;
    bool nameExists = false;
    bool playerJoined = false;
    bool placedSpecialbomb = false;
    private Player pausedPlayer, tempPlayer, newPlayer, connectedPlayer;
    private PlayerObserver? playerObserverer;
    public List<Player> pausePlayers = new List<Player>();
    private List<string> lobbyNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        builder.BuildBoxes();
        builder.BuildBricks();
        easyLevel = builder.GetResult();
        arena = new Arena(easyLevel);
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            arena.players = existingPlayers;
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player, PlayerObserver>("PlayerJoined", (player, playerObserver) =>
        {
            playerObserverer = playerObserver;
            arena.players.Add(player);
            StateHasChanged();
        });

        hubConnection.On<Player>("ObserverJoined", (player) =>
        {
            playerObserverer = new PlayerObserver(player);
            pausedPlayer = player;
            StateHasChanged();
        });

        hubConnection.On<string>("UpdatedArena", (temp) =>
        {
            arena = getArena(temp);
            StateHasChanged();
        });
        hubConnection.On<List<Bomb>>("AllBombs", async (newBombs) =>
        {
            arena.bombs = newBombs;
            await hubConnection.SendAsync("HandleExplosion", SerializeArena());
            await JS.InvokeVoidAsync("Explosion");
            StateHasChanged();
        });

        hubConnection.On<PlayerManagerSubject, Player, List<Player>>("PauseArena", (newSubject, player, observers) =>
        {
            subject = newSubject;
            pausePlayers = observers;
            newPlayer = player;
            StateHasChanged();
        });
        hubConnection.On<List<SpecialBomb>>("AllSpecialBombs", (newBombs) =>
        {
            specialBombs = newBombs;
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerPlacedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Add(bomb);
            StateHasChanged();
        });
        hubConnection.On<SpecialBomb>("PlayerRemovedSpecialBomb", (bomb) =>
        {
            placedSpecialbomb = !placedSpecialbomb;
            specialBombs.Remove(bomb);
            StateHasChanged();
        });


        await hubConnection.StartAsync();

    }
    private async Task PauseArena()
    {
        var player = getConnectedPlayer();
        tempPlayer = player;
        if (arena.players.Count >= 2 && !subject.Paused)
        {

            subject.Subscribe(playerObserverer);
            subject.NotifyAll(true);
            pausePlayers.Add(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && !pausePlayers.Contains(tempPlayer))
        {
            subject.Subscribe(playerObserverer);
            subject.NotifyAll(true);
            pausePlayers.Add(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && pausePlayers.Contains(tempPlayer) && pausePlayers.Count > 1)
        {
            subject.Unsubscribe(playerObserverer);
            pausePlayers.Remove(tempPlayer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
        else if (subject.Paused && pausePlayers.Contains(tempPlayer) && pausePlayers.Count <= 1)
        {
            subject.NotifyAll(false);
            pausePlayers.Remove(tempPlayer);
            subject.Unsubscribe(playerObserverer);
            await hubConnection.SendAsync("PauseArena", subject, tempPlayer, pausePlayers);
        }
    }
    private async Task PressedSubmit()
    {
        Context context = new Context { Input = name };
        IExpression expression = new SwearWordExpression();
        Interpreter interpreter = new Interpreter(expression);

        if (interpreter.Interpret(context))
        {

            swearWordSubmitted = true;
        }
        else
        {
              await hubConnection.SendAsync("SetName", name);


            hubConnection.On<List<string>>("SetName", (names) =>
        {
            lobbyNames = names;
            StateHasChanged();
            if (lobbyNames.Count(s => s == name) == 1)
            {
                swearWordSubmitted = false;

                nameSubmited = true;
               
            }
            else
            {
                nameExists = true;

            }
        });


        }
    }
    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena", name);
        }
    }

    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {
        if (hubConnection is not null && playerJoined && arena.players.Count >= 2 && !subject.Paused)
        {
            var player = getConnectedPlayer();
            Console.WriteLine(SerializeArena());
            await hubConnection.SendAsync("MovePlayer", player, SerializeArena(), e);
            await hubConnection.SendAsync("PlaceBomb", player, SerializeArena(), e);

            ///TODO later
            if (!placedSpecialbomb)
            {
                await hubConnection.SendAsync("PlaceSpecialBomb", player, e);
            }

            if (placedSpecialbomb)
            {
                await hubConnection.SendAsync("RemoveSpecialBomb", player, e);
            }
        }
    }
    public Player getConnectedPlayer()
    {
        Player player = arena.players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        return player;
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private string SerializeArena() => JsonConvert.SerializeObject(arena, new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.Auto
        });
    private Arena getArena(string arena) => JsonConvert.DeserializeObject<Arena>(arena, new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.Auto
        });

}

