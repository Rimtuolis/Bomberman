@page "/OfflineGame"
@using Microsoft.AspNetCore.SignalR.Client
@using BomberGopnik.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Game</PageTitle>


<div>
    <p class="player-counter">Players joined: @players.Count</p>
</div>

@if (arenaPaused)
{
    <div>
        <p class="paused-player">@pausedPlayer.ConnectionId has paused the game</p>
    </div>
}

@if (!GameStarted)
{
    <h2>Select Difficulty:</h2>
    <form @onsubmit="StartGame">
        <label for="difficulty">Difficulty:</label>
        <select id="difficulty" @bind="SelectedDifficulty">
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
        </select>
        <button type="submit">Start Game</button>
    </form>
}
else
{
    <div class="arena">
        @foreach (var player in players)
        {
            <div class="player" style="top: @player.Top%; left: @player.Left%; background-color: @player.Color;"></div>
        }
        @foreach (var brick in easyLevel.Bricks)
        {
            <div class="brick" style="top: @brick.GetStartX()%; left: @brick.GetStartY()%; width: @brick.GetLength()%px; height: @brick.GetLength()%px;"></div>
        }
        @foreach (var box in easyLevel.Boxes)
        {
            <div class="box" style="top: @box.GetStartX()%; left: @box.GetStartY()%; width: @box.GetLength()%px; height: @box.GetLength()%px;"></div>
        }

        @foreach (var bomb in bombs)
        {
            <div class="bomb" style="top: @bomb.StartY%; left: @bomb.StartX%;"></div>
        }

    </div>
    @if (!playerJoined)
    {
        <button class="join-button" @onclick="JoinArena" disabled="@(!IsConnected && playerJoined)">Join Arena</button>
    }
    @if (playerJoined && IsConnected)
    {
        @if (!arenaPaused)
        {
            <button class="pause-button" @onclick="PauseArena">Pause</button>
        }
        else if (arenaPaused)
        {
            <button class="pause-button" @onclick="PauseArena">Unpause</button>
        }
    }
}





@code {
    private bool GameStarted = false;

    private HubConnection? hubConnection;
    private List<Player> players = new List<Player>();
    private IGameLevelBuilder builder = new EasyGameLevelBuilder();
    private GameLevel easyLevel = new GameLevel();
    private string SelectedDifficulty;

    private List<Bomb> bombs = new List<Bomb>();
    bool playerJoined = false;
    bool arenaPaused = false;
    private Player pausedPlayer, tempPlayer;

    protected override async Task OnInitializedAsync()
    {
        builder.BuildBoxes();
        builder.BuildBricks();
        easyLevel = builder.GetResult();
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/arenahub"))
            .Build();

        hubConnection.On<List<Player>>("AssignPlayer", (existingPlayers) =>
        {
            players = existingPlayers;
            playerJoined = true;
            StateHasChanged();
        });

        hubConnection.On<Player>("PlayerJoined", (player) =>
        {
            players.Add(player);
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerMoved", (newPlayers) =>
        {
            players = newPlayers;
            StateHasChanged();
        });
        hubConnection.On<List<Bomb>>("AllBombs", (newBombs) =>
        {

            bombs = newBombs;
            StateHasChanged();
        });
        hubConnection.On<Player>("PauseArena", (player) =>
        {
            arenaPaused = !arenaPaused;
            pausedPlayer = player;
            StateHasChanged();
        });

        hubConnection.On<Bomb>("PlayerPlacedBomb", (bomb) =>
        {
            bombs.Add(bomb);
            StateHasChanged();
        });
        await hubConnection.StartAsync();

    }

    private void StartGame()
    {
        GameStarted = true;

        //Create a game with level and bots with specified difficulty
    }

    private async Task PauseArena()
    {
        var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        if (players.Count >= 2 && !arenaPaused)
        {
            tempPlayer = player;
            await hubConnection.SendAsync("PauseArena", player);
        }
        else if (arenaPaused && player == tempPlayer)
        {
            await hubConnection.SendAsync("PauseArena", player);
        }
    }

    private async Task JoinArena()
    {
        if (hubConnection is not null && !playerJoined)
        {
            playerJoined = true;
            await hubConnection.SendAsync("JoinArena");
        }
    }
    [JSInvokable("KeyDown")]
    public async Task KeyDown(KeyboardEventArgs e)
    {

        Console.WriteLine(e.Code);
        if (hubConnection is not null && playerJoined && players.Count >= 2 && !arenaPaused)
        {
            var player = players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
            var bomb = new Bomb();
            bomb.Id = player.ConnectionId;

            await hubConnection.SendAsync("MovePlayer", player, easyLevel.Bricks, e);
            await hubConnection.SendAsync("PlaceBomb", player, bomb, e);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    public class Lobby
    {
        public int Id { get; set; }
        public int LevelCount { get; set; }
        public string HostPlayer { get; set; }
        public List<string> Players { get; set; }
    }
}

